// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/gemdivk/LUMERA-SPA/salon-management-service/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSalonRepository is a mock of SalonRepository interface.
type MockSalonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSalonRepositoryMockRecorder
}

// MockSalonRepositoryMockRecorder is the mock recorder for MockSalonRepository.
type MockSalonRepositoryMockRecorder struct {
	mock *MockSalonRepository
}

// NewMockSalonRepository creates a new mock instance.
func NewMockSalonRepository(ctrl *gomock.Controller) *MockSalonRepository {
	mock := &MockSalonRepository{ctrl: ctrl}
	mock.recorder = &MockSalonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalonRepository) EXPECT() *MockSalonRepositoryMockRecorder {
	return m.recorder
}

// AddProcedure mocks base method.
func (m *MockSalonRepository) AddProcedure(arg0 *entity.Procedure) (*entity.Procedure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcedure", arg0)
	ret0, _ := ret[0].(*entity.Procedure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcedure indicates an expected call of AddProcedure.
func (mr *MockSalonRepositoryMockRecorder) AddProcedure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcedure", reflect.TypeOf((*MockSalonRepository)(nil).AddProcedure), arg0)
}

// AddSalon mocks base method.
func (m *MockSalonRepository) AddSalon(arg0 *entity.Salon) (*entity.Salon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSalon", arg0)
	ret0, _ := ret[0].(*entity.Salon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSalon indicates an expected call of AddSalon.
func (mr *MockSalonRepositoryMockRecorder) AddSalon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSalon", reflect.TypeOf((*MockSalonRepository)(nil).AddSalon), arg0)
}

// AddSpecialist mocks base method.
func (m *MockSalonRepository) AddSpecialist(arg0 *entity.Specialist) (*entity.Specialist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpecialist", arg0)
	ret0, _ := ret[0].(*entity.Specialist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpecialist indicates an expected call of AddSpecialist.
func (mr *MockSalonRepositoryMockRecorder) AddSpecialist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecialist", reflect.TypeOf((*MockSalonRepository)(nil).AddSpecialist), arg0)
}

// AssignProcedureToSpecialist mocks base method.
func (m *MockSalonRepository) AssignProcedureToSpecialist(specialistID, procedureID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignProcedureToSpecialist", specialistID, procedureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignProcedureToSpecialist indicates an expected call of AssignProcedureToSpecialist.
func (mr *MockSalonRepositoryMockRecorder) AssignProcedureToSpecialist(specialistID, procedureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignProcedureToSpecialist", reflect.TypeOf((*MockSalonRepository)(nil).AssignProcedureToSpecialist), specialistID, procedureID)
}

// DeleteProcedure mocks base method.
func (m *MockSalonRepository) DeleteProcedure(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProcedure", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProcedure indicates an expected call of DeleteProcedure.
func (mr *MockSalonRepositoryMockRecorder) DeleteProcedure(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProcedure", reflect.TypeOf((*MockSalonRepository)(nil).DeleteProcedure), id)
}

// DeleteSalon mocks base method.
func (m *MockSalonRepository) DeleteSalon(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalon", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalon indicates an expected call of DeleteSalon.
func (mr *MockSalonRepositoryMockRecorder) DeleteSalon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalon", reflect.TypeOf((*MockSalonRepository)(nil).DeleteSalon), id)
}

// DeleteSpecialist mocks base method.
func (m *MockSalonRepository) DeleteSpecialist(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecialist", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecialist indicates an expected call of DeleteSpecialist.
func (mr *MockSalonRepositoryMockRecorder) DeleteSpecialist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecialist", reflect.TypeOf((*MockSalonRepository)(nil).DeleteSpecialist), id)
}

// GetAllProcedures mocks base method.
func (m *MockSalonRepository) GetAllProcedures() ([]*entity.Procedure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProcedures")
	ret0, _ := ret[0].([]*entity.Procedure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProcedures indicates an expected call of GetAllProcedures.
func (mr *MockSalonRepositoryMockRecorder) GetAllProcedures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProcedures", reflect.TypeOf((*MockSalonRepository)(nil).GetAllProcedures))
}

// GetAllSalons mocks base method.
func (m *MockSalonRepository) GetAllSalons() ([]*entity.Salon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSalons")
	ret0, _ := ret[0].([]*entity.Salon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSalons indicates an expected call of GetAllSalons.
func (mr *MockSalonRepositoryMockRecorder) GetAllSalons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSalons", reflect.TypeOf((*MockSalonRepository)(nil).GetAllSalons))
}

// GetAllSpecialists mocks base method.
func (m *MockSalonRepository) GetAllSpecialists() ([]*entity.Specialist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpecialists")
	ret0, _ := ret[0].([]*entity.Specialist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpecialists indicates an expected call of GetAllSpecialists.
func (mr *MockSalonRepositoryMockRecorder) GetAllSpecialists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpecialists", reflect.TypeOf((*MockSalonRepository)(nil).GetAllSpecialists))
}

// RemoveProcedureFromSpecialist mocks base method.
func (m *MockSalonRepository) RemoveProcedureFromSpecialist(specialistID, procedureID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcedureFromSpecialist", specialistID, procedureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProcedureFromSpecialist indicates an expected call of RemoveProcedureFromSpecialist.
func (mr *MockSalonRepositoryMockRecorder) RemoveProcedureFromSpecialist(specialistID, procedureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcedureFromSpecialist", reflect.TypeOf((*MockSalonRepository)(nil).RemoveProcedureFromSpecialist), specialistID, procedureID)
}

// UpdateProcedure mocks base method.
func (m *MockSalonRepository) UpdateProcedure(arg0 *entity.Procedure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcedure", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProcedure indicates an expected call of UpdateProcedure.
func (mr *MockSalonRepositoryMockRecorder) UpdateProcedure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcedure", reflect.TypeOf((*MockSalonRepository)(nil).UpdateProcedure), arg0)
}

// UpdateSalon mocks base method.
func (m *MockSalonRepository) UpdateSalon(arg0 *entity.Salon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalon", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalon indicates an expected call of UpdateSalon.
func (mr *MockSalonRepositoryMockRecorder) UpdateSalon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalon", reflect.TypeOf((*MockSalonRepository)(nil).UpdateSalon), arg0)
}

// UpdateSpecialist mocks base method.
func (m *MockSalonRepository) UpdateSpecialist(arg0 *entity.Specialist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecialist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecialist indicates an expected call of UpdateSpecialist.
func (mr *MockSalonRepositoryMockRecorder) UpdateSpecialist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecialist", reflect.TypeOf((*MockSalonRepository)(nil).UpdateSpecialist), arg0)
}
