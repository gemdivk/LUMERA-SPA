// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/cache/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/gemdivk/LUMERA-SPA/salon-management-service/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSalonCache is a mock of SalonCache interface.
type MockSalonCache struct {
	ctrl     *gomock.Controller
	recorder *MockSalonCacheMockRecorder
}

// MockSalonCacheMockRecorder is the mock recorder for MockSalonCache.
type MockSalonCacheMockRecorder struct {
	mock *MockSalonCache
}

// NewMockSalonCache creates a new mock instance.
func NewMockSalonCache(ctrl *gomock.Controller) *MockSalonCache {
	mock := &MockSalonCache{ctrl: ctrl}
	mock.recorder = &MockSalonCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalonCache) EXPECT() *MockSalonCacheMockRecorder {
	return m.recorder
}

// GetProcedures mocks base method.
func (m *MockSalonCache) GetProcedures() ([]*entity.Procedure, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcedures")
	ret0, _ := ret[0].([]*entity.Procedure)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProcedures indicates an expected call of GetProcedures.
func (mr *MockSalonCacheMockRecorder) GetProcedures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcedures", reflect.TypeOf((*MockSalonCache)(nil).GetProcedures))
}

// GetSpecialists mocks base method.
func (m *MockSalonCache) GetSpecialists() ([]*entity.Specialist, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialists")
	ret0, _ := ret[0].([]*entity.Specialist)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSpecialists indicates an expected call of GetSpecialists.
func (mr *MockSalonCacheMockRecorder) GetSpecialists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialists", reflect.TypeOf((*MockSalonCache)(nil).GetSpecialists))
}

// SetProcedures mocks base method.
func (m *MockSalonCache) SetProcedures(arg0 []*entity.Procedure) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProcedures", arg0)
}

// SetProcedures indicates an expected call of SetProcedures.
func (mr *MockSalonCacheMockRecorder) SetProcedures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcedures", reflect.TypeOf((*MockSalonCache)(nil).SetProcedures), arg0)
}

// SetSpecialists mocks base method.
func (m *MockSalonCache) SetSpecialists(arg0 []*entity.Specialist) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSpecialists", arg0)
}

// SetSpecialists indicates an expected call of SetSpecialists.
func (mr *MockSalonCacheMockRecorder) SetSpecialists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpecialists", reflect.TypeOf((*MockSalonCache)(nil).SetSpecialists), arg0)
}
