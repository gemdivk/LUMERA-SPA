// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\aabek\IdeaProjects\spa-salon\review-service\internal\domain\repository\review_repository.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\aabek\IdeaProjects\spa-salon\review-service\internal\domain\repository\review_repository.go -destination=C:\Users\aabek\IdeaProjects\spa-salon\review-service\test\mocks\mock_review_repo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/gemdivk/LUMERA-SPA/review-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockReviewRepo is a mock of ReviewRepo interface.
type MockReviewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepoMockRecorder
	isgomock struct{}
}

// MockReviewRepoMockRecorder is the mock recorder for MockReviewRepo.
type MockReviewRepoMockRecorder struct {
	mock *MockReviewRepo
}

// NewMockReviewRepo creates a new mock instance.
func NewMockReviewRepo(ctrl *gomock.Controller) *MockReviewRepo {
	mock := &MockReviewRepo{ctrl: ctrl}
	mock.recorder = &MockReviewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepo) EXPECT() *MockReviewRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewRepo) Create(review *domain.Review) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", review)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReviewRepoMockRecorder) Create(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewRepo)(nil).Create), review)
}

// Delete mocks base method.
func (m *MockReviewRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewRepoMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewRepo)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockReviewRepo) Get(id string) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReviewRepoMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReviewRepo)(nil).Get), id)
}

// ListBySalon mocks base method.
func (m *MockReviewRepo) ListBySalon(salonID string) ([]*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySalon", salonID)
	ret0, _ := ret[0].([]*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySalon indicates an expected call of ListBySalon.
func (mr *MockReviewRepoMockRecorder) ListBySalon(salonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySalon", reflect.TypeOf((*MockReviewRepo)(nil).ListBySalon), salonID)
}

// Update mocks base method.
func (m *MockReviewRepo) Update(review *domain.Review) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", review)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockReviewRepoMockRecorder) Update(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewRepo)(nil).Update), review)
}
