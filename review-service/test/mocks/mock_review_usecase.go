// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\aabek\IdeaProjects\spa-salon\review-service\internal\domain\application\review_service.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\aabek\IdeaProjects\spa-salon\review-service\internal\domain\application\review_service.go -destination=C:\Users\aabek\IdeaProjects\spa-salon\review-service\test\mocks\mock_review_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/gemdivk/LUMERA-SPA/review-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockReviewUsecase is a mock of ReviewUsecase interface.
type MockReviewUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockReviewUsecaseMockRecorder
	isgomock struct{}
}

// MockReviewUsecaseMockRecorder is the mock recorder for MockReviewUsecase.
type MockReviewUsecaseMockRecorder struct {
	mock *MockReviewUsecase
}

// NewMockReviewUsecase creates a new mock instance.
func NewMockReviewUsecase(ctrl *gomock.Controller) *MockReviewUsecase {
	mock := &MockReviewUsecase{ctrl: ctrl}
	mock.recorder = &MockReviewUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewUsecase) EXPECT() *MockReviewUsecaseMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReviewUsecase) CreateReview(review *domain.Review) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", review)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewUsecaseMockRecorder) CreateReview(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReviewUsecase)(nil).CreateReview), review)
}

// DeleteReview mocks base method.
func (m *MockReviewUsecase) DeleteReview(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockReviewUsecaseMockRecorder) DeleteReview(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockReviewUsecase)(nil).DeleteReview), id)
}

// GetReview mocks base method.
func (m *MockReviewUsecase) GetReview(id string) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", id)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockReviewUsecaseMockRecorder) GetReview(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockReviewUsecase)(nil).GetReview), id)
}

// ListBySalon mocks base method.
func (m *MockReviewUsecase) ListBySalon(salonID string) ([]*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySalon", salonID)
	ret0, _ := ret[0].([]*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySalon indicates an expected call of ListBySalon.
func (mr *MockReviewUsecaseMockRecorder) ListBySalon(salonID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySalon", reflect.TypeOf((*MockReviewUsecase)(nil).ListBySalon), salonID)
}

// UpdateReview mocks base method.
func (m *MockReviewUsecase) UpdateReview(review *domain.Review) (*domain.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", review)
	ret0, _ := ret[0].(*domain.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockReviewUsecaseMockRecorder) UpdateReview(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockReviewUsecase)(nil).UpdateReview), review)
}
