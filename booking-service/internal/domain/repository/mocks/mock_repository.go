// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/gemdivk/LUMERA-SPA/booking-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockBookingRepository) Cancel(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockBookingRepositoryMockRecorder) Cancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBookingRepository)(nil).Cancel), arg0)
}

// Create mocks base method.
func (m *MockBookingRepository) Create(arg0 *domain.Booking) (*domain.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*domain.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookingRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRepository)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockBookingRepository) GetAll() ([]*domain.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBookingRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookingRepository)(nil).GetAll))
}

// ListByClient mocks base method.
func (m *MockBookingRepository) ListByClient(arg0 string) ([]*domain.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByClient", arg0)
	ret0, _ := ret[0].([]*domain.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByClient indicates an expected call of ListByClient.
func (mr *MockBookingRepositoryMockRecorder) ListByClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByClient", reflect.TypeOf((*MockBookingRepository)(nil).ListByClient), arg0)
}

// Reschedule mocks base method.
func (m *MockBookingRepository) Reschedule(arg0, arg1, arg2 string) (*domain.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reschedule", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reschedule indicates an expected call of Reschedule.
func (mr *MockBookingRepositoryMockRecorder) Reschedule(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reschedule", reflect.TypeOf((*MockBookingRepository)(nil).Reschedule), arg0, arg1, arg2)
}
