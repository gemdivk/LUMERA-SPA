// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/booking.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookingService_ListAvailableSlots_FullMethodName          = "/booking.BookingService/ListAvailableSlots"
	BookingService_CreateBooking_FullMethodName               = "/booking.BookingService/CreateBooking"
	BookingService_CancelBooking_FullMethodName               = "/booking.BookingService/CancelBooking"
	BookingService_ListClientBookings_FullMethodName          = "/booking.BookingService/ListClientBookings"
	BookingService_AdminCreateProcedure_FullMethodName        = "/booking.BookingService/AdminCreateProcedure"
	BookingService_AdminAssignProcedure_FullMethodName        = "/booking.BookingService/AdminAssignProcedure"
	BookingService_AdminCreateScheduleTemplate_FullMethodName = "/booking.BookingService/AdminCreateScheduleTemplate"
	BookingService_AdminOverrideDaySchedule_FullMethodName    = "/booking.BookingService/AdminOverrideDaySchedule"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===== SERVICE DEFINITION =====
type BookingServiceClient interface {
	ListAvailableSlots(ctx context.Context, in *ListAvailableSlotsRequest, opts ...grpc.CallOption) (*ListAvailableSlotsResponse, error)
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error)
	ListClientBookings(ctx context.Context, in *ClientBookingsRequest, opts ...grpc.CallOption) (*ClientBookingsResponse, error)
	AdminCreateProcedure(ctx context.Context, in *CreateProcedureRequest, opts ...grpc.CallOption) (*ProcedureResponse, error)
	AdminAssignProcedure(ctx context.Context, in *AssignProcedureRequest, opts ...grpc.CallOption) (*AssignProcedureResponse, error)
	AdminCreateScheduleTemplate(ctx context.Context, in *CreateScheduleTemplateRequest, opts ...grpc.CallOption) (*ScheduleTemplateResponse, error)
	AdminOverrideDaySchedule(ctx context.Context, in *OverrideDayScheduleRequest, opts ...grpc.CallOption) (*OverrideDayScheduleResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) ListAvailableSlots(ctx context.Context, in *ListAvailableSlotsRequest, opts ...grpc.CallOption) (*ListAvailableSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableSlotsResponse)
	err := c.cc.Invoke(ctx, BookingService_ListAvailableSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, BookingService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingResponse)
	err := c.cc.Invoke(ctx, BookingService_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) ListClientBookings(ctx context.Context, in *ClientBookingsRequest, opts ...grpc.CallOption) (*ClientBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientBookingsResponse)
	err := c.cc.Invoke(ctx, BookingService_ListClientBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) AdminCreateProcedure(ctx context.Context, in *CreateProcedureRequest, opts ...grpc.CallOption) (*ProcedureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcedureResponse)
	err := c.cc.Invoke(ctx, BookingService_AdminCreateProcedure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) AdminAssignProcedure(ctx context.Context, in *AssignProcedureRequest, opts ...grpc.CallOption) (*AssignProcedureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignProcedureResponse)
	err := c.cc.Invoke(ctx, BookingService_AdminAssignProcedure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) AdminCreateScheduleTemplate(ctx context.Context, in *CreateScheduleTemplateRequest, opts ...grpc.CallOption) (*ScheduleTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleTemplateResponse)
	err := c.cc.Invoke(ctx, BookingService_AdminCreateScheduleTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) AdminOverrideDaySchedule(ctx context.Context, in *OverrideDayScheduleRequest, opts ...grpc.CallOption) (*OverrideDayScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverrideDayScheduleResponse)
	err := c.cc.Invoke(ctx, BookingService_AdminOverrideDaySchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility.
//
// ===== SERVICE DEFINITION =====
type BookingServiceServer interface {
	ListAvailableSlots(context.Context, *ListAvailableSlotsRequest) (*ListAvailableSlotsResponse, error)
	CreateBooking(context.Context, *CreateBookingRequest) (*BookingResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error)
	ListClientBookings(context.Context, *ClientBookingsRequest) (*ClientBookingsResponse, error)
	AdminCreateProcedure(context.Context, *CreateProcedureRequest) (*ProcedureResponse, error)
	AdminAssignProcedure(context.Context, *AssignProcedureRequest) (*AssignProcedureResponse, error)
	AdminCreateScheduleTemplate(context.Context, *CreateScheduleTemplateRequest) (*ScheduleTemplateResponse, error)
	AdminOverrideDaySchedule(context.Context, *OverrideDayScheduleRequest) (*OverrideDayScheduleResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookingServiceServer struct{}

func (UnimplementedBookingServiceServer) ListAvailableSlots(context.Context, *ListAvailableSlotsRequest) (*ListAvailableSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableSlots not implemented")
}
func (UnimplementedBookingServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedBookingServiceServer) ListClientBookings(context.Context, *ClientBookingsRequest) (*ClientBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientBookings not implemented")
}
func (UnimplementedBookingServiceServer) AdminCreateProcedure(context.Context, *CreateProcedureRequest) (*ProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateProcedure not implemented")
}
func (UnimplementedBookingServiceServer) AdminAssignProcedure(context.Context, *AssignProcedureRequest) (*AssignProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAssignProcedure not implemented")
}
func (UnimplementedBookingServiceServer) AdminCreateScheduleTemplate(context.Context, *CreateScheduleTemplateRequest) (*ScheduleTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateScheduleTemplate not implemented")
}
func (UnimplementedBookingServiceServer) AdminOverrideDaySchedule(context.Context, *OverrideDayScheduleRequest) (*OverrideDayScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminOverrideDaySchedule not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}
func (UnimplementedBookingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_ListAvailableSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ListAvailableSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ListAvailableSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ListAvailableSlots(ctx, req.(*ListAvailableSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_ListClientBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).ListClientBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_ListClientBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).ListClientBookings(ctx, req.(*ClientBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_AdminCreateProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AdminCreateProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AdminCreateProcedure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AdminCreateProcedure(ctx, req.(*CreateProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_AdminAssignProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AdminAssignProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AdminAssignProcedure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AdminAssignProcedure(ctx, req.(*AssignProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_AdminCreateScheduleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AdminCreateScheduleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AdminCreateScheduleTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AdminCreateScheduleTemplate(ctx, req.(*CreateScheduleTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_AdminOverrideDaySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideDayScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AdminOverrideDaySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AdminOverrideDaySchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AdminOverrideDaySchedule(ctx, req.(*OverrideDayScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableSlots",
			Handler:    _BookingService_ListAvailableSlots_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _BookingService_CreateBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _BookingService_CancelBooking_Handler,
		},
		{
			MethodName: "ListClientBookings",
			Handler:    _BookingService_ListClientBookings_Handler,
		},
		{
			MethodName: "AdminCreateProcedure",
			Handler:    _BookingService_AdminCreateProcedure_Handler,
		},
		{
			MethodName: "AdminAssignProcedure",
			Handler:    _BookingService_AdminAssignProcedure_Handler,
		},
		{
			MethodName: "AdminCreateScheduleTemplate",
			Handler:    _BookingService_AdminCreateScheduleTemplate_Handler,
		},
		{
			MethodName: "AdminOverrideDaySchedule",
			Handler:    _BookingService_AdminOverrideDaySchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/booking.proto",
}
